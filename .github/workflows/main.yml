name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  # Changeset check - only runs on PRs
  changeset-check:
    name: Check for Changesets
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      - name: Check for changesets
        run: |
          # Skip changeset check for automated version PRs
          if [[ "${{ github.head_ref }}" == "changeset-release/"* ]]; then
            echo "Skipping changeset check for automated release PR"
            exit 0
          fi

          # Count changeset files (excluding README.md and config.json)
          CHANGESET_COUNT=$(find .changeset -name "*.md" ! -name "README.md" | wc -l)

          echo "Found $CHANGESET_COUNT changeset file(s)"

          # Ensure exactly one changeset file exists
          if [ "$CHANGESET_COUNT" -eq 0 ]; then
            echo "::error::No changeset found. Please add a changeset by running 'npm run changeset' and commit the result."
            exit 1
          elif [ "$CHANGESET_COUNT" -gt 1 ]; then
            echo "::error::Multiple changesets found ($CHANGESET_COUNT). Each PR should have exactly ONE changeset."
            echo "::error::Found changeset files:"
            find .changeset -name "*.md" ! -name "README.md" -exec basename {} \;
            exit 1
          fi

          # Get the changeset file
          CHANGESET_FILE=$(find .changeset -name "*.md" ! -name "README.md" | head -1)
          echo "Validating changeset: $CHANGESET_FILE"

          # Check if changeset has a valid type (major, minor, or patch)
          if ! grep -qE "^['\"]test-anywhere['\"]:\s+(major|minor|patch)" "$CHANGESET_FILE"; then
            echo "::error::Changeset must specify a version type: major, minor, or patch"
            echo "::error::Expected format in $CHANGESET_FILE:"
            echo "::error::---"
            echo "::error::'test-anywhere': patch"
            echo "::error::---"
            echo "::error::"
            echo "::error::Your description here"
            cat "$CHANGESET_FILE"
            exit 1
          fi

          # Extract description (everything after the closing ---) and check it's not empty
          DESCRIPTION=$(awk '/^---$/{count++; next} count==2' "$CHANGESET_FILE" | sed '/^[[:space:]]*$/d')

          if [ -z "$DESCRIPTION" ]; then
            echo "::error::Changeset must include a description of the changes"
            echo "::error::The description should appear after the closing '---' in the changeset file"
            echo "::error::Current content of $CHANGESET_FILE:"
            cat "$CHANGESET_FILE"
            exit 1
          fi

          echo "‚úÖ Changeset validation passed"
          echo "   Type: $(grep -E "^['\"]test-anywhere['\"]:" "$CHANGESET_FILE" | sed "s/.*: //")"
          echo "   Description: $DESCRIPTION"

  # Linting and formatting - runs after changeset check on PRs, immediately on main
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: [changeset-check]
    if: always() && (github.event_name == 'push' || needs.changeset-check.result == 'success')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Check file size limit
        run: npm run check:file-size

  # Test on Node.js - runs after changeset check on PRs, immediately on main
  test-node:
    name: Test on Node.js
    runs-on: ubuntu-latest
    needs: [changeset-check]
    if: always() && (github.event_name == 'push' || needs.changeset-check.result == 'success')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  # Test on Bun - runs after changeset check on PRs, immediately on main
  test-bun:
    name: Test on Bun
    runs-on: ubuntu-latest
    needs: [changeset-check]
    if: always() && (github.event_name == 'push' || needs.changeset-check.result == 'success')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Run tests
        run: bun test

  # Test on Deno - runs after changeset check on PRs, immediately on main
  test-deno:
    name: Test on Deno
    runs-on: ubuntu-latest
    needs: [changeset-check]
    if: always() && (github.event_name == 'push' || needs.changeset-check.result == 'success')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Run tests
        run: deno test --allow-read

  # Release - only runs on main after tests pass
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test-node, test-bun, test-deno]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          publish: npm run changeset:publish
          version: npm run changeset:version
          commit: 'chore: version packages'
          title: 'chore: version packages'
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Add npm links to GitHub releases
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "Published packages:"
          echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -r '.[] | "- \(.name)@\(.version)"'

          # Add npm package links to the GitHub releases
          for package in $(echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -r '.[] | @base64'); do
            _jq() {
              echo "${package}" | base64 --decode | jq -r "${1}"
            }

            PKG_NAME=$(_jq '.name')
            PKG_VERSION=$(_jq '.version')

            # Get the release ID for this version
            RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/v${PKG_VERSION} --jq '.id' 2>/dev/null || echo "")

            if [ -n "$RELEASE_ID" ]; then
              # Get current release body
              CURRENT_BODY=$(gh api repos/${{ github.repository }}/releases/${RELEASE_ID} --jq '.body')

              # Add npm link if not already present
              if ! echo "$CURRENT_BODY" | grep -q "npmjs.com/package/${PKG_NAME}"; then
                NPM_LINK="\n\n---\n\nüì¶ **npm Package**: https://www.npmjs.com/package/${PKG_NAME}/v/${PKG_VERSION}"
                NEW_BODY="${CURRENT_BODY}${NPM_LINK}"

                # Update the release
                gh api repos/${{ github.repository }}/releases/${RELEASE_ID} \
                  -X PATCH \
                  -f body="$NEW_BODY"

                echo "‚úÖ Added npm link to release v${PKG_VERSION}"
              else
                echo "‚ÑπÔ∏è npm link already exists in release v${PKG_VERSION}"
              fi
            else
              echo "‚ö†Ô∏è Could not find release for v${PKG_VERSION}"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
